# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import bot_comm_pb2 as bot__comm__pb2
import transaction_pb2 as transaction__pb2


class TransactionCommunicatorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.BotStopped = channel.unary_unary(
                '/TransactionCommunicator/BotStopped',
                request_serializer=bot__comm__pb2.BotRequest.SerializeToString,
                response_deserializer=bot__comm__pb2.BotResponse.FromString,
                )
        self.BotRemoved = channel.unary_unary(
                '/TransactionCommunicator/BotRemoved',
                request_serializer=bot__comm__pb2.BotRequest.SerializeToString,
                response_deserializer=bot__comm__pb2.BotResponse.FromString,
                )
        self.OpenTrades = channel.unary_unary(
                '/TransactionCommunicator/OpenTrades',
                request_serializer=transaction__pb2.BotAddress.SerializeToString,
                response_deserializer=bot__comm__pb2.BotResponse.FromString,
                )


class TransactionCommunicatorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def BotStopped(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BotRemoved(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenTrades(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TransactionCommunicatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'BotStopped': grpc.unary_unary_rpc_method_handler(
                    servicer.BotStopped,
                    request_deserializer=bot__comm__pb2.BotRequest.FromString,
                    response_serializer=bot__comm__pb2.BotResponse.SerializeToString,
            ),
            'BotRemoved': grpc.unary_unary_rpc_method_handler(
                    servicer.BotRemoved,
                    request_deserializer=bot__comm__pb2.BotRequest.FromString,
                    response_serializer=bot__comm__pb2.BotResponse.SerializeToString,
            ),
            'OpenTrades': grpc.unary_unary_rpc_method_handler(
                    servicer.OpenTrades,
                    request_deserializer=transaction__pb2.BotAddress.FromString,
                    response_serializer=bot__comm__pb2.BotResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TransactionCommunicator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TransactionCommunicator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def BotStopped(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TransactionCommunicator/BotStopped',
            bot__comm__pb2.BotRequest.SerializeToString,
            bot__comm__pb2.BotResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BotRemoved(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TransactionCommunicator/BotRemoved',
            bot__comm__pb2.BotRequest.SerializeToString,
            bot__comm__pb2.BotResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OpenTrades(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TransactionCommunicator/OpenTrades',
            transaction__pb2.BotAddress.SerializeToString,
            bot__comm__pb2.BotResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
