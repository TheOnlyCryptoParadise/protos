// source: statistics.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var transaction_pb = require('./transaction_pb.js');
goog.object.extend(proto, transaction_pb);
var bot_comm_pb = require('./bot_comm_pb.js');
goog.object.extend(proto, bot_comm_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.Asset', null, global);
goog.exportSymbol('proto.BotAsset', null, global);
goog.exportSymbol('proto.BotStatistics', null, global);
goog.exportSymbol('proto.OverallStatistics', null, global);
goog.exportSymbol('proto.UserAssets', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BotStatistics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BotStatistics.repeatedFields_, null);
};
goog.inherits(proto.BotStatistics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BotStatistics.displayName = 'proto.BotStatistics';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Asset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Asset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Asset.displayName = 'proto.Asset';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BotAsset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BotAsset.repeatedFields_, null);
};
goog.inherits(proto.BotAsset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BotAsset.displayName = 'proto.BotAsset';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UserAssets = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.UserAssets.repeatedFields_, null);
};
goog.inherits(proto.UserAssets, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.UserAssets.displayName = 'proto.UserAssets';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OverallStatistics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OverallStatistics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OverallStatistics.displayName = 'proto.OverallStatistics';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BotStatistics.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BotStatistics.prototype.toObject = function(opt_includeInstance) {
  return proto.BotStatistics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BotStatistics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BotStatistics.toObject = function(includeInstance, msg) {
  var f, obj = {
    botid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    profit: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    assetsList: jspb.Message.toObjectList(msg.getAssetsList(),
    proto.Asset.toObject, includeInstance),
    sincelasttrade: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BotStatistics}
 */
proto.BotStatistics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BotStatistics;
  return proto.BotStatistics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BotStatistics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BotStatistics}
 */
proto.BotStatistics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBotid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setProfit(value);
      break;
    case 3:
      var value = new proto.Asset;
      reader.readMessage(value,proto.Asset.deserializeBinaryFromReader);
      msg.addAssets(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSincelasttrade(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BotStatistics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BotStatistics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BotStatistics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BotStatistics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBotid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getProfit();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getAssetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Asset.serializeBinaryToWriter
    );
  }
  f = message.getSincelasttrade();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint64 botId = 1;
 * @return {number}
 */
proto.BotStatistics.prototype.getBotid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.BotStatistics} returns this
 */
proto.BotStatistics.prototype.setBotid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional double profit = 2;
 * @return {number}
 */
proto.BotStatistics.prototype.getProfit = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.BotStatistics} returns this
 */
proto.BotStatistics.prototype.setProfit = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * repeated Asset assets = 3;
 * @return {!Array<!proto.Asset>}
 */
proto.BotStatistics.prototype.getAssetsList = function() {
  return /** @type{!Array<!proto.Asset>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Asset, 3));
};


/**
 * @param {!Array<!proto.Asset>} value
 * @return {!proto.BotStatistics} returns this
*/
proto.BotStatistics.prototype.setAssetsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Asset=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Asset}
 */
proto.BotStatistics.prototype.addAssets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Asset, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.BotStatistics} returns this
 */
proto.BotStatistics.prototype.clearAssetsList = function() {
  return this.setAssetsList([]);
};


/**
 * optional string sinceLastTrade = 4;
 * @return {string}
 */
proto.BotStatistics.prototype.getSincelasttrade = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.BotStatistics} returns this
 */
proto.BotStatistics.prototype.setSincelasttrade = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Asset.prototype.toObject = function(opt_includeInstance) {
  return proto.Asset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Asset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Asset.toObject = function(includeInstance, msg) {
  var f, obj = {
    pair: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    currentrate: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    currentvalue: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    profit: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    cost: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Asset}
 */
proto.Asset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Asset;
  return proto.Asset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Asset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Asset}
 */
proto.Asset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPair(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCurrentrate(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCurrentvalue(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setProfit(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCost(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Asset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Asset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Asset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Asset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPair();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getCurrentrate();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getCurrentvalue();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getProfit();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getCost();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
};


/**
 * optional string pair = 1;
 * @return {string}
 */
proto.Asset.prototype.getPair = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Asset} returns this
 */
proto.Asset.prototype.setPair = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double amount = 2;
 * @return {number}
 */
proto.Asset.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Asset} returns this
 */
proto.Asset.prototype.setAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double currentRate = 3;
 * @return {number}
 */
proto.Asset.prototype.getCurrentrate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Asset} returns this
 */
proto.Asset.prototype.setCurrentrate = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double currentValue = 4;
 * @return {number}
 */
proto.Asset.prototype.getCurrentvalue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Asset} returns this
 */
proto.Asset.prototype.setCurrentvalue = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float profit = 5;
 * @return {number}
 */
proto.Asset.prototype.getProfit = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Asset} returns this
 */
proto.Asset.prototype.setProfit = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float cost = 6;
 * @return {number}
 */
proto.Asset.prototype.getCost = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Asset} returns this
 */
proto.Asset.prototype.setCost = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BotAsset.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BotAsset.prototype.toObject = function(opt_includeInstance) {
  return proto.BotAsset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BotAsset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BotAsset.toObject = function(includeInstance, msg) {
  var f, obj = {
    botid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    assetsList: jspb.Message.toObjectList(msg.getAssetsList(),
    proto.Asset.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BotAsset}
 */
proto.BotAsset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BotAsset;
  return proto.BotAsset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BotAsset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BotAsset}
 */
proto.BotAsset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBotid(value);
      break;
    case 2:
      var value = new proto.Asset;
      reader.readMessage(value,proto.Asset.deserializeBinaryFromReader);
      msg.addAssets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BotAsset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BotAsset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BotAsset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BotAsset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBotid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getAssetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Asset.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 botId = 1;
 * @return {number}
 */
proto.BotAsset.prototype.getBotid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.BotAsset} returns this
 */
proto.BotAsset.prototype.setBotid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Asset assets = 2;
 * @return {!Array<!proto.Asset>}
 */
proto.BotAsset.prototype.getAssetsList = function() {
  return /** @type{!Array<!proto.Asset>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Asset, 2));
};


/**
 * @param {!Array<!proto.Asset>} value
 * @return {!proto.BotAsset} returns this
*/
proto.BotAsset.prototype.setAssetsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Asset=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Asset}
 */
proto.BotAsset.prototype.addAssets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Asset, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.BotAsset} returns this
 */
proto.BotAsset.prototype.clearAssetsList = function() {
  return this.setAssetsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.UserAssets.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UserAssets.prototype.toObject = function(opt_includeInstance) {
  return proto.UserAssets.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UserAssets} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UserAssets.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetsList: jspb.Message.toObjectList(msg.getAssetsList(),
    proto.BotAsset.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UserAssets}
 */
proto.UserAssets.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UserAssets;
  return proto.UserAssets.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UserAssets} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UserAssets}
 */
proto.UserAssets.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.BotAsset;
      reader.readMessage(value,proto.BotAsset.deserializeBinaryFromReader);
      msg.addAssets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UserAssets.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UserAssets.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UserAssets} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UserAssets.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.BotAsset.serializeBinaryToWriter
    );
  }
};


/**
 * repeated BotAsset assets = 1;
 * @return {!Array<!proto.BotAsset>}
 */
proto.UserAssets.prototype.getAssetsList = function() {
  return /** @type{!Array<!proto.BotAsset>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.BotAsset, 1));
};


/**
 * @param {!Array<!proto.BotAsset>} value
 * @return {!proto.UserAssets} returns this
*/
proto.UserAssets.prototype.setAssetsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.BotAsset=} opt_value
 * @param {number=} opt_index
 * @return {!proto.BotAsset}
 */
proto.UserAssets.prototype.addAssets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.BotAsset, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.UserAssets} returns this
 */
proto.UserAssets.prototype.clearAssetsList = function() {
  return this.setAssetsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OverallStatistics.prototype.toObject = function(opt_includeInstance) {
  return proto.OverallStatistics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OverallStatistics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OverallStatistics.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalprofit: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    totalbalance: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    lasttradetime: jspb.Message.getFieldWithDefault(msg, 3, ""),
    bestbotname: jspb.Message.getFieldWithDefault(msg, 4, ""),
    worstbotname: jspb.Message.getFieldWithDefault(msg, 5, ""),
    realisedtrades: jspb.Message.getFieldWithDefault(msg, 6, 0),
    alltrades: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OverallStatistics}
 */
proto.OverallStatistics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OverallStatistics;
  return proto.OverallStatistics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OverallStatistics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OverallStatistics}
 */
proto.OverallStatistics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalprofit(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalbalance(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLasttradetime(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBestbotname(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorstbotname(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRealisedtrades(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAlltrades(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OverallStatistics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OverallStatistics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OverallStatistics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OverallStatistics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalprofit();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getTotalbalance();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getLasttradetime();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBestbotname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getWorstbotname();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRealisedtrades();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getAlltrades();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional double totalProfit = 1;
 * @return {number}
 */
proto.OverallStatistics.prototype.getTotalprofit = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.OverallStatistics} returns this
 */
proto.OverallStatistics.prototype.setTotalprofit = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double totalBalance = 2;
 * @return {number}
 */
proto.OverallStatistics.prototype.getTotalbalance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.OverallStatistics} returns this
 */
proto.OverallStatistics.prototype.setTotalbalance = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional string lastTradeTime = 3;
 * @return {string}
 */
proto.OverallStatistics.prototype.getLasttradetime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.OverallStatistics} returns this
 */
proto.OverallStatistics.prototype.setLasttradetime = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string bestBotName = 4;
 * @return {string}
 */
proto.OverallStatistics.prototype.getBestbotname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.OverallStatistics} returns this
 */
proto.OverallStatistics.prototype.setBestbotname = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string worstBotName = 5;
 * @return {string}
 */
proto.OverallStatistics.prototype.getWorstbotname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.OverallStatistics} returns this
 */
proto.OverallStatistics.prototype.setWorstbotname = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 realisedTrades = 6;
 * @return {number}
 */
proto.OverallStatistics.prototype.getRealisedtrades = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.OverallStatistics} returns this
 */
proto.OverallStatistics.prototype.setRealisedtrades = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 allTrades = 7;
 * @return {number}
 */
proto.OverallStatistics.prototype.getAlltrades = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.OverallStatistics} returns this
 */
proto.OverallStatistics.prototype.setAlltrades = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


goog.object.extend(exports, proto);
