# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import stock_pb2 as stock__pb2


class StockCommunicatorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddFortune = channel.unary_unary(
                '/StockCommunicator/AddFortune',
                request_serializer=stock__pb2.Fortune.SerializeToString,
                response_deserializer=stock__pb2.Fortune.FromString,
                )
        self.GetFortune = channel.unary_unary(
                '/StockCommunicator/GetFortune',
                request_serializer=stock__pb2.FortuneRequest.SerializeToString,
                response_deserializer=stock__pb2.Fortune.FromString,
                )
        self.AddTransaction = channel.unary_unary(
                '/StockCommunicator/AddTransaction',
                request_serializer=stock__pb2.StockTransaction.SerializeToString,
                response_deserializer=stock__pb2.TransactionAckStatus.FromString,
                )
        self.CancelTransaction = channel.unary_unary(
                '/StockCommunicator/CancelTransaction',
                request_serializer=stock__pb2.TransactionRequest.SerializeToString,
                response_deserializer=stock__pb2.TransactionAckStatus.FromString,
                )
        self.CheckTransactionStatus = channel.unary_unary(
                '/StockCommunicator/CheckTransactionStatus',
                request_serializer=stock__pb2.TransactionRequest.SerializeToString,
                response_deserializer=stock__pb2.TransactionAckStatus.FromString,
                )


class StockCommunicatorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddFortune(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFortune(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckTransactionStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StockCommunicatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddFortune': grpc.unary_unary_rpc_method_handler(
                    servicer.AddFortune,
                    request_deserializer=stock__pb2.Fortune.FromString,
                    response_serializer=stock__pb2.Fortune.SerializeToString,
            ),
            'GetFortune': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFortune,
                    request_deserializer=stock__pb2.FortuneRequest.FromString,
                    response_serializer=stock__pb2.Fortune.SerializeToString,
            ),
            'AddTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.AddTransaction,
                    request_deserializer=stock__pb2.StockTransaction.FromString,
                    response_serializer=stock__pb2.TransactionAckStatus.SerializeToString,
            ),
            'CancelTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelTransaction,
                    request_deserializer=stock__pb2.TransactionRequest.FromString,
                    response_serializer=stock__pb2.TransactionAckStatus.SerializeToString,
            ),
            'CheckTransactionStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckTransactionStatus,
                    request_deserializer=stock__pb2.TransactionRequest.FromString,
                    response_serializer=stock__pb2.TransactionAckStatus.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'StockCommunicator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class StockCommunicator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddFortune(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/StockCommunicator/AddFortune',
            stock__pb2.Fortune.SerializeToString,
            stock__pb2.Fortune.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFortune(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/StockCommunicator/GetFortune',
            stock__pb2.FortuneRequest.SerializeToString,
            stock__pb2.Fortune.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/StockCommunicator/AddTransaction',
            stock__pb2.StockTransaction.SerializeToString,
            stock__pb2.TransactionAckStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/StockCommunicator/CancelTransaction',
            stock__pb2.TransactionRequest.SerializeToString,
            stock__pb2.TransactionAckStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckTransactionStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/StockCommunicator/CheckTransactionStatus',
            stock__pb2.TransactionRequest.SerializeToString,
            stock__pb2.TransactionAckStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
